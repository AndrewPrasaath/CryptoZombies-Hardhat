{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_zombieId",
          "type": "uint256"
        }
      ],
      "name": "levelUp",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_zombieId",
          "type": "uint256"
        },
        {
          "name": "_kittyId",
          "type": "uint256"
        }
      ],
      "name": "feedOnKitty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zombies",
      "outputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "dna",
          "type": "uint256"
        },
        {
          "name": "level",
          "type": "uint32"
        },
        {
          "name": "readyTime",
          "type": "uint32"
        },
        {
          "name": "winCount",
          "type": "uint16"
        },
        {
          "name": "lossCount",
          "type": "uint16"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getZombiesByOwner",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zombieToOwner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setKittyContractAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_zombieId",
          "type": "uint256"
        },
        {
          "name": "_newDna",
          "type": "uint256"
        }
      ],
      "name": "changeDna",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createRandomZombie",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_zombieId",
          "type": "uint256"
        },
        {
          "name": "_newName",
          "type": "string"
        }
      ],
      "name": "changeName",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setLevelUpFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_zombieId",
          "type": "uint256"
        },
        {
          "name": "_targetId",
          "type": "uint256"
        }
      ],
      "name": "attack",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "zombieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "dna",
          "type": "uint256"
        }
      ],
      "name": "NewZombie",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x26d0a8445ebf7931165cf0d79f8aec8cc646239e04aa7ccaf071439ee497bbe2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2064365",
    "logsBloom": "0x
    "blockHash": "0xe26d7d0969f07c3d366b8007d1fca3f88756a9f4fddf5be5a09a9893e4c1ba3a",
    "transactionHash": "0x26d0a8445ebf7931165cf0d79f8aec8cc646239e04aa7ccaf071439ee497bbe2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x26d0a8445ebf7931165cf0d79f8aec8cc646239e04aa7ccaf071439ee497bbe2",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe26d7d0969f07c3d366b8007d1fca3f88756a9f4fddf5be5a09a9893e4c1ba3a"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2064365",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa7bdec8a3a60cc0f024f242647e5663",
  "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.c68bc34e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zombieId\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zombieId\",\"type\":\"uint256\"},{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"feedOnKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombies\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dna\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint32\"},{\"name\":\"readyTime\",\"type\":\"uint32\"},{\"name\":\"winCount\",\"type\":\"uint16\"},{\"name\":\"lossCount\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getZombiesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombieToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setKittyContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zombieId\",\"type\":\"uint256\"},{\"name\":\"_newDna\",\"type\":\"uint256\"}],\"name\":\"changeDna\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createRandomZombie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zombieId\",\"type\":\"uint256\"},{\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setLevelUpFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zombieId\",\"type\":\"uint256\"},{\"name\":\"_targetId\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zombieId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"NewZombie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CryptoZombies.sol\":\"CryptoZombies\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CryptoZombies.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./zombieOwnership.sol\\\";\\n\\ncontract CryptoZombies is ZombieOwnership {}\\n\",\"keccak256\":\"0x79a090ebf4cd411d77d49f826f9e2994ef51be2234210343143b9bd46b3fa18d\"},\"contracts/erc721.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\ncontract ERC721 {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xf5a94b0a0ff87705ef34be025528c42d90e42b616824f31decd0bbf9826beeb9\"},\"contracts/ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x97b5575de2b2289318cccf7c3f628586d1207e91a2d8d9da6d14213a108e226c\"},\"contracts/safemath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title SafeMath32\\n * @dev SafeMath library implemented for uint32\\n */\\nlibrary SafeMath32 {\\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint32 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint32 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n        uint32 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title SafeMath16\\n * @dev SafeMath library implemented for uint16\\n */\\nlibrary SafeMath16 {\\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint16 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint16 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\\n        uint16 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x39c6b08bf2af4bbdb034041be11f769effa79005b4e610e59d5dbfe67a4ac995\"},\"contracts/zombieOwnership.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./zombieattack.sol\\\";\\nimport \\\"./erc721.sol\\\";\\nimport \\\"./safemath.sol\\\";\\n\\n// @title Contract to give ownership for each zombies\\n// @author Andrew Prasaath\\n// @dev This contract uses ERC721 standard to give ownership\\ncontract ZombieOwnership is ZombieAttack, ERC721 {\\n    using SafeMath for uint256;\\n\\n    mapping(uint => address) zombieApprovals;\\n\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return ownerZombieCount[_owner];\\n    }\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address) {\\n        return zombieToOwner[_tokenId];\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\\n        ownerZombieCount[_to] = ownerZombieCount[_to].add(1);\\n        ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].sub(1);\\n        zombieToOwner[_tokenId] = _to;\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable {\\n        require(\\n            zombieToOwner[_tokenId] == msg.sender ||\\n                zombieApprovals[_tokenId] == msg.sender\\n        );\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    function approve(\\n        address _approved,\\n        uint256 _tokenId\\n    ) external payable onlyOwnerOf(_tokenId) {\\n        zombieApprovals[_tokenId] = _approved;\\n        emit Approval(msg.sender, _approved, _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x675dc90532c2e930dcf077a8d2daaed32bd3c90d19d99681b5ceabd392c66c68\"},\"contracts/zombieattack.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./zombiehelper.sol\\\";\\n\\ncontract ZombieAttack is ZombieHelper {\\n    uint randNonce = 0;\\n    uint attackVictoryProbability = 70;\\n\\n    function randMod(uint _modulus) internal returns (uint) {\\n        randNonce = randNonce.add(1);\\n        return\\n            uint(keccak256(abi.encodePacked(now, msg.sender, randNonce))) %\\n            _modulus;\\n    }\\n\\n    function attack(\\n        uint _zombieId,\\n        uint _targetId\\n    ) external onlyOwnerOf(_zombieId) {\\n        Zombie storage myZombie = zombies[_zombieId];\\n        Zombie storage enemyZombie = zombies[_targetId];\\n        uint rand = randMod(100);\\n        if (rand <= attackVictoryProbability) {\\n            myZombie.winCount = myZombie.winCount.add(1);\\n            myZombie.level = myZombie.level.add(1);\\n            enemyZombie.lossCount = enemyZombie.lossCount.add(1);\\n            feedAndMultiply(_zombieId, enemyZombie.dna, \\\"zombie\\\");\\n        } else {\\n            myZombie.lossCount = myZombie.lossCount.add(1);\\n            enemyZombie.winCount = enemyZombie.winCount.add(1);\\n            _triggerCooldown(myZombie);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48add23774aa6c8952cac4333894dbd72c78e5832bb1f521ef1db1a3c6bc8951\"},\"contracts/zombiefactory.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./safemath.sol\\\";\\n\\ncontract ZombieFactory is Ownable {\\n    using SafeMath for uint256;\\n    using SafeMath32 for uint32;\\n    using SafeMath16 for uint16;\\n\\n    event NewZombie(uint zombieId, string name, uint dna);\\n\\n    uint dnaDigits = 16;\\n    uint dnaModulus = 10 ** dnaDigits;\\n    uint cooldownTime = 1 days;\\n\\n    struct Zombie {\\n        string name;\\n        uint dna;\\n        uint32 level;\\n        uint32 readyTime;\\n        uint16 winCount;\\n        uint16 lossCount;\\n    }\\n\\n    Zombie[] public zombies;\\n\\n    mapping(uint => address) public zombieToOwner;\\n    mapping(address => uint) ownerZombieCount;\\n\\n    function _createZombie(string memory _name, uint _dna) internal {\\n        uint id = zombies.push(\\n            Zombie(_name, _dna, 1, uint32(now + cooldownTime), 0, 0)\\n        ) - 1;\\n        zombieToOwner[id] = msg.sender;\\n        ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);\\n        emit NewZombie(id, _name, _dna);\\n    }\\n\\n    function _generateRandomDna(\\n        string memory _str\\n    ) private view returns (uint) {\\n        uint rand = uint(keccak256(abi.encodePacked(_str)));\\n        return rand % dnaModulus;\\n    }\\n\\n    function createRandomZombie(string memory _name) public {\\n        require(ownerZombieCount[msg.sender] == 0);\\n        uint randDna = _generateRandomDna(_name);\\n        randDna = randDna - (randDna % 100);\\n        _createZombie(_name, randDna);\\n    }\\n}\\n\",\"keccak256\":\"0x554acfd42e25ef765440f20ce68f99d4a27cf75db27e6ce376665fd80fb745b4\"},\"contracts/zombiefeeding.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./zombiefactory.sol\\\";\\n\\ncontract KittyInterface {\\n    function getKitty(\\n        uint256 _id\\n    )\\n        external\\n        view\\n        returns (\\n            bool isGestating,\\n            bool isReady,\\n            uint256 cooldownIndex,\\n            uint256 nextActionAt,\\n            uint256 siringWithId,\\n            uint256 birthTime,\\n            uint256 matronId,\\n            uint256 sireId,\\n            uint256 generation,\\n            uint256 genes\\n        );\\n}\\n\\ncontract ZombieFeeding is ZombieFactory {\\n    KittyInterface kittyContract;\\n\\n    modifier onlyOwnerOf(uint _zombieId) {\\n        require(msg.sender == zombieToOwner[_zombieId]);\\n        _;\\n    }\\n\\n    function setKittyContractAddress(address _address) external onlyOwner {\\n        kittyContract = KittyInterface(_address);\\n    }\\n\\n    function _triggerCooldown(Zombie storage _zombie) internal {\\n        _zombie.readyTime = uint32(now + cooldownTime);\\n    }\\n\\n    function _isReady(Zombie storage _zombie) internal view returns (bool) {\\n        return (_zombie.readyTime <= now);\\n    }\\n\\n    function feedAndMultiply(\\n        uint _zombieId,\\n        uint _targetDna,\\n        string memory _species\\n    ) internal onlyOwnerOf(_zombieId) {\\n        Zombie storage myZombie = zombies[_zombieId];\\n        require(_isReady(myZombie));\\n        _targetDna = _targetDna % dnaModulus;\\n        uint newDna = (myZombie.dna + _targetDna) / 2;\\n        if (\\n            keccak256(abi.encodePacked(_species)) ==\\n            keccak256(abi.encodePacked(\\\"kitty\\\"))\\n        ) {\\n            newDna = newDna - (newDna % 100) + 99;\\n        }\\n        _createZombie(\\\"NoName\\\", newDna);\\n        _triggerCooldown(myZombie);\\n    }\\n\\n    function feedOnKitty(uint _zombieId, uint _kittyId) public {\\n        uint kittyDna;\\n        (, , , , , , , , , kittyDna) = kittyContract.getKitty(_kittyId);\\n        feedAndMultiply(_zombieId, kittyDna, \\\"kitty\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x71d84b3016833b153ac1b5196d0d8928c3fb18f4c0de9969674dec2828b9f488\"},\"contracts/zombiehelper.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./zombiefeeding.sol\\\";\\n\\ncontract ZombieHelper is ZombieFeeding {\\n    uint levelUpFee = 0.001 ether;\\n\\n    modifier aboveLevel(uint _level, uint _zombieId) {\\n        require(zombies[_zombieId].level >= _level);\\n        _;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        address payable _owner = address(uint160(owner()));\\n        _owner.transfer(address(this).balance);\\n    }\\n\\n    function setLevelUpFee(uint _fee) external onlyOwner {\\n        levelUpFee = _fee;\\n    }\\n\\n    function levelUp(uint _zombieId) external payable {\\n        require(msg.value == levelUpFee);\\n        zombies[_zombieId].level = zombies[_zombieId].level.add(1);\\n    }\\n\\n    function changeName(\\n        uint _zombieId,\\n        string calldata _newName\\n    ) external aboveLevel(2, _zombieId) onlyOwnerOf(_zombieId) {\\n        zombies[_zombieId].name = _newName;\\n    }\\n\\n    function changeDna(\\n        uint _zombieId,\\n        uint _newDna\\n    ) external aboveLevel(20, _zombieId) onlyOwnerOf(_zombieId) {\\n        zombies[_zombieId].dna = _newDna;\\n    }\\n\\n    function getZombiesByOwner(\\n        address _owner\\n    ) external view returns (uint[] memory) {\\n        uint[] memory result = new uint[](ownerZombieCount[_owner]);\\n        uint counter = 0;\\n        for (uint i = 0; i < zombies.length; i++) {\\n            if (zombieToOwner[i] == _owner) {\\n                result[counter] = i;\\n                counter++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x595f6b9553a51c835ada01e1bbaad9c11f89a1fbbfe51fe2842eb8ab8972ecee\"}},\"version\":1}",
  "bytecode": "0x60806040526010600155600154600a0a6002556201518060035566038d7ea4c6800060085560006009556046600a55336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36121e3806100f96000396000f3fe60806040526004361061011f5760003560e01c80636352211e116100a05780638f32d59b116100645780638f32d59b14610736578063c39cbef114610765578063ccf670f8146107f5578063e1fa763814610830578063f2fde38b146108755761011f565b80636352211e1461052057806370a082311461059b578063715018a6146106005780637bff0a01146106175780638da5cb5b146106df5761011f565b80633ccfd60b116100e75780633ccfd60b146103525780634412e10414610369578063528b7b8f1461040f5780635f4623f11461048a5780635faf2880146104db5761011f565b8063095ea7b3146101245780630ce90ec21461017257806317a7f4cc146101a05780632052465e146101e557806323b872dd146102e4575b600080fd5b6101706004803603604081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108c6565b005b61019e6004803603602081101561018857600080fd5b81019080803590602001909291905050506109e4565b005b3480156101ac57600080fd5b506101e3600480360360408110156101c357600080fd5b810190808035906020019092919080359060200190929190505050610a79565b005b3480156101f157600080fd5b5061021e6004803603602081101561020857600080fd5b8101908080359060200190929190505050610c04565b60405180806020018781526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff1681526020018461ffff1661ffff1681526020018361ffff1661ffff168152602001828103825288818151815260200191508051906020019080838360005b838110156102a4578082015181840152602081019050610289565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b610350600480360360608110156102fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d21565b005b34801561035e57600080fd5b50610367610e05565b005b34801561037557600080fd5b506103b86004803603602081101561038c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e83565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103fb5780820151818401526020810190506103e0565b505050509050019250505060405180910390f35b34801561041b57600080fd5b506104486004803603602081101561043257600080fd5b8101908080359060200190929190505050610fb0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049657600080fd5b506104d9600480360360208110156104ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe3565b005b3480156104e757600080fd5b5061051e600480360360408110156104fe57600080fd5b810190808035906020019092919080359060200190929190505050611038565b005b34801561052c57600080fd5b506105596004803603602081101561054357600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a757600080fd5b506105ea600480360360208110156105be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061114f565b6040518082815260200191505060405180910390f35b34801561060c57600080fd5b50610615611198565b005b34801561062357600080fd5b506106dd6004803603602081101561063a57600080fd5b810190808035906020019064010000000081111561065757600080fd5b82018360208201111561066957600080fd5b8035906020019184600183028401116401000000008311171561068b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611268565b005b3480156106eb57600080fd5b506106f46112de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074257600080fd5b5061074b611307565b604051808215151515815260200191505060405180910390f35b34801561077157600080fd5b506107f36004803603604081101561078857600080fd5b8101908080359060200190929190803590602001906401000000008111156107af57600080fd5b8201836020820111156107c157600080fd5b803590602001918460018302840111640100000000831117156107e357600080fd5b909192939192939050505061135e565b005b34801561080157600080fd5b5061082e6004803603602081101561081857600080fd5b8101908080359060200190929190505050611444565b005b34801561083c57600080fd5b506108736004803603604081101561085357600080fd5b81019080803590602001909291908035906020019092919050505061145f565b005b34801561088157600080fd5b506108c46004803603602081101561089857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116eb565b005b806005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461093257600080fd5b82600b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60085434146109f257600080fd5b610a3a600160048381548110610a0457fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff1661170890919063ffffffff16565b60048281548110610a4757fe5b906000526020600020906003020160020160006101000a81548163ffffffff021916908363ffffffff16021790555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e98b7f4d836040518263ffffffff1660e01b8152600401808281526020019150506101406040518083038186803b158015610aef57600080fd5b505afa158015610b03573d6000803e3d6000fd5b505050506040513d610140811015610b1a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919293949596979850909192939495969750909192939495965090919293949550909192939450909192935090919250909150905080915050610bff83826040518060400160405280600581526020017f6b69747479000000000000000000000000000000000000000000000000000000815250611730565b505050565b60048181548110610c1157fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b5050505050908060010154908060020160009054906101000a900463ffffffff16908060020160049054906101000a900463ffffffff16908060020160089054906101000a900461ffff169080600201600a9054906101000a900461ffff16905086565b3373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610dec57503373ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610df557600080fd5b610e00838383611912565b505050565b610e0d611307565b610e1657600080fd5b6000610e206112de565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610e7f573d6000803e3d6000fd5b5050565b606080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051908082528060200260200182016040528015610ef45781602001602082028038833980820191505090505b509050600080905060008090505b600480549050811015610fa5578473ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f985780838381518110610f8357fe5b60200260200101818152505081806001019250505b8080600101915050610f02565b508192505050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610feb611307565b610ff457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601482816004828154811061104957fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff16101561107c57600080fd5b836005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110e857600080fd5b83600486815481106110f657fe5b9060005260206000209060030201600101819055505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111a0611307565b6111a957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146112b457600080fd5b60006112bf82611af0565b9050606481816112cb57fe5b06810390506112da8282611b7e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600283816004828154811061136f57fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff1610156113a257600080fd5b846005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461140e57600080fd5b84846004888154811061141d57fe5b9060005260206000209060030201600001919061143b929190612089565b50505050505050565b61144c611307565b61145557600080fd5b8060088190555050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114cb57600080fd5b6000600484815481106114da57fe5b906000526020600020906003020190506000600484815481106114f957fe5b9060005260206000209060030201905060006115156064611e50565b9050600a5481116116495761154a60018460020160089054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b8360020160086101000a81548161ffff021916908361ffff16021790555061159660018460020160009054906101000a900463ffffffff1663ffffffff1661170890919063ffffffff16565b8360020160006101000a81548163ffffffff021916908363ffffffff1602179055506115e2600183600201600a9054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b82600201600a6101000a81548161ffff021916908361ffff1602179055506116448683600101546040518060400160405280600681526020017f7a6f6d6269650000000000000000000000000000000000000000000000000000815250611730565b6116e3565b611673600184600201600a9054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b83600201600a6101000a81548161ffff021916908361ffff1602179055506116bb60018360020160089054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b8260020160086101000a81548161ffff021916908361ffff1602179055506116e283611f0d565b5b505050505050565b6116f3611307565b6116fc57600080fd5b61170581611f37565b50565b60008082840190508363ffffffff168163ffffffff16101561172657fe5b8091505092915050565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179c57600080fd5b6000600485815481106117ab57fe5b906000526020600020906003020190506117c48161202f565b6117cd57600080fd5b60025484816117d857fe5b0693506000600285836001015401816117ed57fe5b04905060405160200180807f6b69747479000000000000000000000000000000000000000000000000000000815250600501905060405160208183030381529060405280519060200120846040516020018082805190602001908083835b6020831061186e578051825260208201915060208101905060208303925061184b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156118c2576063606482816118bb57fe5b0682030190505b6119016040518060400160405280600681526020017f4e6f4e616d65000000000000000000000000000000000000000000000000000081525082611b7e565b61190a82611f0d565b505050505050565b6119656001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461205690919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119fb6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461207290919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080826040516020018082805190602001908083835b60208310611b2a5780518252602082019150602081019050602083039250611b07565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012060001c90506002548181611b7557fe5b06915050919050565b6000600160046040518060c00160405280868152602001858152602001600163ffffffff168152602001600354420163ffffffff168152602001600061ffff168152602001600061ffff16815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000019080519060200190611c13929190612109565b506020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160086101000a81548161ffff021916908361ffff16021790555060a082015181600201600a6101000a81548161ffff021916908361ffff1602179055505050039050336005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d5c6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461205690919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f88f026aacbbecc90c18411df4b1185fd8d9be2470f1962f192bf84a27d0704b78184846040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611e0f578082015181840152602081019050611df4565b50505050905090810190601f168015611e3c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b6000611e68600160095461205690919063ffffffff16565b600981905550814233600954604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140182815260200193505050506040516020818303038152906040528051906020012060001c81611ee157fe5b069050919050565b60008082840190508361ffff168161ffff161015611f0357fe5b8091505092915050565b60035442018160020160046101000a81548163ffffffff021916908363ffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f7157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000428260020160049054906101000a900463ffffffff1663ffffffff1611159050919050565b60008082840190508381101561206857fe5b8091505092915050565b60008282111561207e57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120ca57803560ff19168380011785556120f8565b828001600101855582156120f8579182015b828111156120f75782358255916020019190600101906120dc565b5b5090506121059190612189565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061214a57805160ff1916838001178555612178565b82800160010185558215612178579182015b8281111561217757825182559160200191906001019061215c565b5b5090506121859190612189565b5090565b6121ab91905b808211156121a757600081600090555060010161218f565b5090565b9056fea265627a7a723058207afe12c7328c147c2683c7bfc22567fb91c8607b58b3971e841cb50660fd95e664736f6c63430005090032",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80636352211e116100a05780638f32d59b116100645780638f32d59b14610736578063c39cbef114610765578063ccf670f8146107f5578063e1fa763814610830578063f2fde38b146108755761011f565b80636352211e1461052057806370a082311461059b578063715018a6146106005780637bff0a01146106175780638da5cb5b146106df5761011f565b80633ccfd60b116100e75780633ccfd60b146103525780634412e10414610369578063528b7b8f1461040f5780635f4623f11461048a5780635faf2880146104db5761011f565b8063095ea7b3146101245780630ce90ec21461017257806317a7f4cc146101a05780632052465e146101e557806323b872dd146102e4575b600080fd5b6101706004803603604081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108c6565b005b61019e6004803603602081101561018857600080fd5b81019080803590602001909291905050506109e4565b005b3480156101ac57600080fd5b506101e3600480360360408110156101c357600080fd5b810190808035906020019092919080359060200190929190505050610a79565b005b3480156101f157600080fd5b5061021e6004803603602081101561020857600080fd5b8101908080359060200190929190505050610c04565b60405180806020018781526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff1681526020018461ffff1661ffff1681526020018361ffff1661ffff168152602001828103825288818151815260200191508051906020019080838360005b838110156102a4578082015181840152602081019050610289565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b610350600480360360608110156102fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d21565b005b34801561035e57600080fd5b50610367610e05565b005b34801561037557600080fd5b506103b86004803603602081101561038c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e83565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103fb5780820151818401526020810190506103e0565b505050509050019250505060405180910390f35b34801561041b57600080fd5b506104486004803603602081101561043257600080fd5b8101908080359060200190929190505050610fb0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049657600080fd5b506104d9600480360360208110156104ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe3565b005b3480156104e757600080fd5b5061051e600480360360408110156104fe57600080fd5b810190808035906020019092919080359060200190929190505050611038565b005b34801561052c57600080fd5b506105596004803603602081101561054357600080fd5b8101908080359060200190929190505050611112565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a757600080fd5b506105ea600480360360208110156105be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061114f565b6040518082815260200191505060405180910390f35b34801561060c57600080fd5b50610615611198565b005b34801561062357600080fd5b506106dd6004803603602081101561063a57600080fd5b810190808035906020019064010000000081111561065757600080fd5b82018360208201111561066957600080fd5b8035906020019184600183028401116401000000008311171561068b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611268565b005b3480156106eb57600080fd5b506106f46112de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074257600080fd5b5061074b611307565b604051808215151515815260200191505060405180910390f35b34801561077157600080fd5b506107f36004803603604081101561078857600080fd5b8101908080359060200190929190803590602001906401000000008111156107af57600080fd5b8201836020820111156107c157600080fd5b803590602001918460018302840111640100000000831117156107e357600080fd5b909192939192939050505061135e565b005b34801561080157600080fd5b5061082e6004803603602081101561081857600080fd5b8101908080359060200190929190505050611444565b005b34801561083c57600080fd5b506108736004803603604081101561085357600080fd5b81019080803590602001909291908035906020019092919050505061145f565b005b34801561088157600080fd5b506108c46004803603602081101561089857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116eb565b005b806005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461093257600080fd5b82600b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60085434146109f257600080fd5b610a3a600160048381548110610a0457fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff1661170890919063ffffffff16565b60048281548110610a4757fe5b906000526020600020906003020160020160006101000a81548163ffffffff021916908363ffffffff16021790555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e98b7f4d836040518263ffffffff1660e01b8152600401808281526020019150506101406040518083038186803b158015610aef57600080fd5b505afa158015610b03573d6000803e3d6000fd5b505050506040513d610140811015610b1a57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919293949596979850909192939495969750909192939495965090919293949550909192939450909192935090919250909150905080915050610bff83826040518060400160405280600581526020017f6b69747479000000000000000000000000000000000000000000000000000000815250611730565b505050565b60048181548110610c1157fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b5050505050908060010154908060020160009054906101000a900463ffffffff16908060020160049054906101000a900463ffffffff16908060020160089054906101000a900461ffff169080600201600a9054906101000a900461ffff16905086565b3373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610dec57503373ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610df557600080fd5b610e00838383611912565b505050565b610e0d611307565b610e1657600080fd5b6000610e206112de565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610e7f573d6000803e3d6000fd5b5050565b606080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051908082528060200260200182016040528015610ef45781602001602082028038833980820191505090505b509050600080905060008090505b600480549050811015610fa5578473ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f985780838381518110610f8357fe5b60200260200101818152505081806001019250505b8080600101915050610f02565b508192505050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610feb611307565b610ff457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601482816004828154811061104957fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff16101561107c57600080fd5b836005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110e857600080fd5b83600486815481106110f657fe5b9060005260206000209060030201600101819055505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111a0611307565b6111a957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146112b457600080fd5b60006112bf82611af0565b9050606481816112cb57fe5b06810390506112da8282611b7e565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600283816004828154811061136f57fe5b906000526020600020906003020160020160009054906101000a900463ffffffff1663ffffffff1610156113a257600080fd5b846005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461140e57600080fd5b84846004888154811061141d57fe5b9060005260206000209060030201600001919061143b929190612089565b50505050505050565b61144c611307565b61145557600080fd5b8060088190555050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114cb57600080fd5b6000600484815481106114da57fe5b906000526020600020906003020190506000600484815481106114f957fe5b9060005260206000209060030201905060006115156064611e50565b9050600a5481116116495761154a60018460020160089054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b8360020160086101000a81548161ffff021916908361ffff16021790555061159660018460020160009054906101000a900463ffffffff1663ffffffff1661170890919063ffffffff16565b8360020160006101000a81548163ffffffff021916908363ffffffff1602179055506115e2600183600201600a9054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b82600201600a6101000a81548161ffff021916908361ffff1602179055506116448683600101546040518060400160405280600681526020017f7a6f6d6269650000000000000000000000000000000000000000000000000000815250611730565b6116e3565b611673600184600201600a9054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b83600201600a6101000a81548161ffff021916908361ffff1602179055506116bb60018360020160089054906101000a900461ffff1661ffff16611ee990919063ffffffff16565b8260020160086101000a81548161ffff021916908361ffff1602179055506116e283611f0d565b5b505050505050565b6116f3611307565b6116fc57600080fd5b61170581611f37565b50565b60008082840190508363ffffffff168163ffffffff16101561172657fe5b8091505092915050565b826005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179c57600080fd5b6000600485815481106117ab57fe5b906000526020600020906003020190506117c48161202f565b6117cd57600080fd5b60025484816117d857fe5b0693506000600285836001015401816117ed57fe5b04905060405160200180807f6b69747479000000000000000000000000000000000000000000000000000000815250600501905060405160208183030381529060405280519060200120846040516020018082805190602001908083835b6020831061186e578051825260208201915060208101905060208303925061184b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156118c2576063606482816118bb57fe5b0682030190505b6119016040518060400160405280600681526020017f4e6f4e616d65000000000000000000000000000000000000000000000000000081525082611b7e565b61190a82611f0d565b505050505050565b6119656001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461205690919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119fb6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461207290919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080826040516020018082805190602001908083835b60208310611b2a5780518252602082019150602081019050602083039250611b07565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012060001c90506002548181611b7557fe5b06915050919050565b6000600160046040518060c00160405280868152602001858152602001600163ffffffff168152602001600354420163ffffffff168152602001600061ffff168152602001600061ffff16815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000019080519060200190611c13929190612109565b506020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160086101000a81548161ffff021916908361ffff16021790555060a082015181600201600a6101000a81548161ffff021916908361ffff1602179055505050039050336005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d5c6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461205690919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f88f026aacbbecc90c18411df4b1185fd8d9be2470f1962f192bf84a27d0704b78184846040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611e0f578082015181840152602081019050611df4565b50505050905090810190601f168015611e3c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505050565b6000611e68600160095461205690919063ffffffff16565b600981905550814233600954604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140182815260200193505050506040516020818303038152906040528051906020012060001c81611ee157fe5b069050919050565b60008082840190508361ffff168161ffff161015611f0357fe5b8091505092915050565b60035442018160020160046101000a81548163ffffffff021916908363ffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f7157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000428260020160049054906101000a900463ffffffff1663ffffffff1611159050919050565b60008082840190508381101561206857fe5b8091505092915050565b60008282111561207e57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120ca57803560ff19168380011785556120f8565b828001600101855582156120f8579182015b828111156120f75782358255916020019190600101906120dc565b5b5090506121059190612189565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061214a57805160ff1916838001178555612178565b82800160010185558215612178579182015b8281111561217757825182559160200191906001019061215c565b5b5090506121859190612189565b5090565b6121ab91905b808211156121a757600081600090555060010161218f565b5090565b9056fea265627a7a723058207afe12c7328c147c2683c7bfc22567fb91c8607b58b3971e841cb50660fd95e664736f6c63430005090032",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}